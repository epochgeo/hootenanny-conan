diff --git a/conf/schema/name.json b/conf/schema/name.json
index f34cd56..9d037af 100644
--- a/conf/schema/name.json
+++ b/conf/schema/name.json
@@ -13,6 +13,11 @@
     },
     {
         "isA": "abstract_name",
+        "name": "alt_name:en",
+        "objectType": "tag"
+    },
+    {
+        "isA": "abstract_name",
         "name": "int_name",
         "objectType": "tag"
     },
diff --git a/hoot-core/src/main/cpp/hoot/core/Hoot.cpp b/hoot-core/src/main/cpp/hoot/core/Hoot.cpp
index b36b359..1bc036a 100644
--- a/hoot-core/src/main/cpp/hoot/core/Hoot.cpp
+++ b/hoot-core/src/main/cpp/hoot/core/Hoot.cpp
@@ -43,6 +43,7 @@
 
 // Qt
 #include <QLibrary>
+#include <QtPlugin>
 #include <QNetworkSession>
 
 // System
@@ -54,6 +55,9 @@
 # include <tgs/BigContainers/Stxxl.h>
 #endif
 
+// let Qt know that we're using a statically linked plugin
+Q_IMPORT_PLUGIN(QSQLiteDriverPlugin)
+
 using namespace std;
 
 namespace hoot
diff --git a/hoot-core/src/main/cpp/hoot/core/algorithms/rubber-sheet/RubberSheet.cpp b/hoot-core/src/main/cpp/hoot/core/algorithms/rubber-sheet/RubberSheet.cpp
index 0f2b35b..270a494 100644
--- a/hoot-core/src/main/cpp/hoot/core/algorithms/rubber-sheet/RubberSheet.cpp
+++ b/hoot-core/src/main/cpp/hoot/core/algorithms/rubber-sheet/RubberSheet.cpp
@@ -53,6 +53,7 @@
 #include <tgs/RandomForest/DataFrame.h>
 
 // Qt
+#include <QDataStream>
 #include <QElapsedTimer>
 
 using namespace geos::geom;
diff --git a/hoot-core/src/main/cpp/hoot/core/algorithms/splitter/OsmMapSplitter.cpp b/hoot-core/src/main/cpp/hoot/core/algorithms/splitter/OsmMapSplitter.cpp
index d353cd7..69dca21 100644
--- a/hoot-core/src/main/cpp/hoot/core/algorithms/splitter/OsmMapSplitter.cpp
+++ b/hoot-core/src/main/cpp/hoot/core/algorithms/splitter/OsmMapSplitter.cpp
@@ -35,6 +35,7 @@
 
 //  Qt
 #include <QElapsedTimer>
+#include <QUrl>
 
 
 using geos::geom::Envelope;
diff --git a/hoot-core/src/main/cpp/hoot/core/cmd/VersionCmd.cpp b/hoot-core/src/main/cpp/hoot/core/cmd/VersionCmd.cpp
index 2cb628e..91d1392 100644
--- a/hoot-core/src/main/cpp/hoot/core/cmd/VersionCmd.cpp
+++ b/hoot-core/src/main/cpp/hoot/core/cmd/VersionCmd.cpp
@@ -53,17 +53,19 @@
 #include <cppunit/Portability.h>
 #endif
 
+#ifdef HOOT_HAVE_NODEJS
 // NodeJs
 #include <node/node_version.h>
 
 // v8
 #include <v8-version-string.h>
+#endif
 
 // tgs
 #include <tgs/System/SystemInfo.h>
 
-// python
-#include <patchlevel.h>
+// // python
+// #include <patchlevel.h>
 
 // Protobuf
 #include <google/protobuf/stubs/common.h>
@@ -123,9 +125,11 @@ public:
 #   ifdef HOOT_HAVE_LIBCPPUNIT
       LOG_DEBUG("CppUnit Version:\t" << CPPUNIT_VERSION);
 #   endif
+#   ifdef HOOT_HAVE_NODEJS
     LOG_DEBUG("NodeJs Version:\t" << NODE_VERSION_STRING);
     LOG_DEBUG("v8 Version:  \t" << V8_VERSION_STRING);
-    LOG_DEBUG("Python Version:\t" << PY_VERSION);
+#   endif
+    //LOG_DEBUG("Python Version:\t" << PY_VERSION);
     LOG_DEBUG("Protobuf Version:\t" << QString("%1.%2.%3")
               .arg(GOOGLE_PROTOBUF_VERSION / 1000000)
               .arg(GOOGLE_PROTOBUF_VERSION / 1000 % 1000)
diff --git a/hoot-core/src/main/cpp/hoot/core/conflate/ConflateExecutor.cpp b/hoot-core/src/main/cpp/hoot/core/conflate/ConflateExecutor.cpp
index aa71483..12b3763 100644
--- a/hoot-core/src/main/cpp/hoot/core/conflate/ConflateExecutor.cpp
+++ b/hoot-core/src/main/cpp/hoot/core/conflate/ConflateExecutor.cpp
@@ -293,17 +293,9 @@ void ConflateExecutor::conflate(const QString& input1, const QString& input2, co
   _stats.append(SingleStat("Initial Element Count", initialElementCount));
   OsmMapWriterFactory::writeDebugMap(map, className(), "after-load");
 
-  if (!ConfigOptions().getConflatePreOps().empty())
-  {
-    _runConflateOps(map, true);
-  }
-
+  _runConflatePreOps(map);
   _runConflate(map);
-
-  if (!ConfigOptions().getConflatePostOps().empty())
-  {
-    _runConflateOps(map, false);
-  }
+  _runConflatePostOps(map);
 
   // cleanup
 
@@ -428,6 +420,22 @@ void ConflateExecutor::_load(
   MemoryUsageChecker::getInstance().check();
 }
 
+void ConflateExecutor::_runConflatePreOps(OsmMapPtr map)
+{
+  if (!ConfigOptions().getConflatePreOps().empty())
+  {
+    _runConflateOps(map, true);
+  }
+}
+
+void ConflateExecutor::_runConflatePostOps(OsmMapPtr map)
+{
+  if (!ConfigOptions().getConflatePostOps().empty())
+  {
+    _runConflateOps(map, false);
+  }
+}
+
 void ConflateExecutor::_runConflate(OsmMapPtr& map)
 {
   if (_isDiffConflate)
diff --git a/hoot-core/src/main/cpp/hoot/core/conflate/ConflateExecutor.h b/hoot-core/src/main/cpp/hoot/core/conflate/ConflateExecutor.h
index 567a308..790b1b1 100644
--- a/hoot-core/src/main/cpp/hoot/core/conflate/ConflateExecutor.h
+++ b/hoot-core/src/main/cpp/hoot/core/conflate/ConflateExecutor.h
@@ -80,6 +80,11 @@ public:
   void setDisplayChangesetStats(bool display) { _displayChangesetStats = display; }
   void setOutputChangesetStatsFile(QString file) { _outputChangesetStatsFile = file; }
 
+protected:
+
+  virtual void _runConflatePreOps(OsmMapPtr map);
+  virtual void _runConflatePostOps(OsmMapPtr map);
+
 private:
 
   bool _isDiffConflate;
diff --git a/hoot-core/src/main/cpp/hoot/core/conflate/matching/OptionsValidator.cpp b/hoot-core/src/main/cpp/hoot/core/conflate/matching/OptionsValidator.cpp
index 7f85545..96dcb09 100644
--- a/hoot-core/src/main/cpp/hoot/core/conflate/matching/OptionsValidator.cpp
+++ b/hoot-core/src/main/cpp/hoot/core/conflate/matching/OptionsValidator.cpp
@@ -122,6 +122,14 @@ void OptionsValidator::fixMisc()
     {
       fixedMergerCreators.append(PoiPolygonMergerCreator::className());
     }
+    // if we don't recognize the matcher, assume the merger is in the right spot
+    else
+    {
+      QString mergerCreator = mergerCreators.at(i);
+      LOG_DEBUG("Unrecognized matcher " << matchCreator <<
+        " assuming it matches " << mergerCreator << " and leaving the merger unchanged.");
+      fixedMergerCreators.append(mergerCreator);
+    }
   }
   mergerCreators = fixedMergerCreators;
 
diff --git a/hoot-core/src/main/cpp/hoot/core/conflate/review/ReviewMarker.cpp b/hoot-core/src/main/cpp/hoot/core/conflate/review/ReviewMarker.cpp
index 97d3e17..0f8c611 100644
--- a/hoot-core/src/main/cpp/hoot/core/conflate/review/ReviewMarker.cpp
+++ b/hoot-core/src/main/cpp/hoot/core/conflate/review/ReviewMarker.cpp
@@ -197,7 +197,8 @@ void ReviewMarker::mark(
 
 void ReviewMarker::mark(
   const OsmMapPtr& map, const std::vector<ElementId>& ids, const QString& note,
-  const QString& reviewType, double score, const vector<QString>& choices) const
+  const QString& reviewType, double score, const vector<QString>& choices, 
+  const Tags& additionalTags) const
 {
   if (note.isEmpty())
   {
@@ -237,6 +238,8 @@ void ReviewMarker::mark(
     r->getTags()[MetadataTags::HootReviewChoices() + ":" + QString::number(i+1)] = choices[i];
   }
 
+  r->getTags().add(additionalTags);
+
   map->addElement(r);
 
   LOG_TRACE("Marked review: " << r);
diff --git a/hoot-core/src/main/cpp/hoot/core/conflate/review/ReviewMarker.h b/hoot-core/src/main/cpp/hoot/core/conflate/review/ReviewMarker.h
index c86e4d5..9738319 100644
--- a/hoot-core/src/main/cpp/hoot/core/conflate/review/ReviewMarker.h
+++ b/hoot-core/src/main/cpp/hoot/core/conflate/review/ReviewMarker.h
@@ -93,7 +93,8 @@ public:
   void mark(
     const OsmMapPtr& map, const std::vector<ElementId>& ids, const QString& note,
     const QString& reviewType, double score = -1,
-    const std::vector<QString>& choices = std::vector<QString>()) const;
+    const std::vector<QString>& choices = std::vector<QString>(), 
+    const Tags& additionalTags = Tags()) const;
 
   static QString getBadGeometryType() { return _complexGeometryType; }
 
diff --git a/hoot-core/src/main/cpp/hoot/core/elements/OsmMap.cpp b/hoot-core/src/main/cpp/hoot/core/elements/OsmMap.cpp
index bc19982..f8edee9 100644
--- a/hoot-core/src/main/cpp/hoot/core/elements/OsmMap.cpp
+++ b/hoot-core/src/main/cpp/hoot/core/elements/OsmMap.cpp
@@ -52,6 +52,7 @@
 
 // Qt
 #include <QTextStream>
+#include <QUrl>
 
 using namespace std;
 
diff --git a/hoot-core/src/main/cpp/hoot/core/io/OgrUtilities.cpp b/hoot-core/src/main/cpp/hoot/core/io/OgrUtilities.cpp
index d8c88c4..edda431 100644
--- a/hoot-core/src/main/cpp/hoot/core/io/OgrUtilities.cpp
+++ b/hoot-core/src/main/cpp/hoot/core/io/OgrUtilities.cpp
@@ -101,6 +101,7 @@ OgrUtilities::~OgrUtilities()
   OGRCleanupAll();
   LOG_TRACE("Destroying driver manager...");
   GDALDestroyDriverManager();
+  LOG_TRACE("Destroyed.");
 }
 
 OgrUtilities& OgrUtilities::getInstance()
diff --git a/hoot-core/src/main/cpp/hoot/core/language/ToEnglishDictionaryTranslator.cpp b/hoot-core/src/main/cpp/hoot/core/language/ToEnglishDictionaryTranslator.cpp
index a18ede4..869fdd1 100644
--- a/hoot-core/src/main/cpp/hoot/core/language/ToEnglishDictionaryTranslator.cpp
+++ b/hoot-core/src/main/cpp/hoot/core/language/ToEnglishDictionaryTranslator.cpp
@@ -41,6 +41,8 @@ using namespace std;
 namespace hoot
 {
 
+using UnicodeString = icu_69::UnicodeString;
+
 QSet<QString> ToEnglishDictionaryTranslator::_streetTypes;
 
 HOOT_FACTORY_REGISTER(ToEnglishTranslator, ToEnglishDictionaryTranslator)
@@ -244,7 +246,8 @@ QString ToEnglishDictionaryTranslator::transliterateToLatin(const QString& input
   return result;
 }
 
-QString ToEnglishDictionaryTranslator::_transform(const shared_ptr<Transliterator>& t, const QString& input) const
+QString ToEnglishDictionaryTranslator::_transform(const shared_ptr<IcuTransliterator>& t,
+  const QString& input) const
 {
   UnicodeString str((UChar*)input.constData(), input.size());
 
diff --git a/hoot-core/src/main/cpp/hoot/core/language/ToEnglishDictionaryTranslator.h b/hoot-core/src/main/cpp/hoot/core/language/ToEnglishDictionaryTranslator.h
index 4f8e9e9..95c1453 100644
--- a/hoot-core/src/main/cpp/hoot/core/language/ToEnglishDictionaryTranslator.h
+++ b/hoot-core/src/main/cpp/hoot/core/language/ToEnglishDictionaryTranslator.h
@@ -40,6 +40,9 @@
 namespace hoot
 {
 
+//using Transliterator = icu::Transliterator;
+using IcuTransliterator = icu_69::Transliterator;
+
 class ToEnglishTranslateDictionary;
 
 /**
@@ -104,7 +107,7 @@ private:
   static QSet<QString> _streetTypes;
   QRegExp _whiteSpace;
 
-  QString _transform(const std::shared_ptr<icu::Transliterator>& t, const QString& input) const;
+  QString _transform(const std::shared_ptr<IcuTransliterator>& t, const QString& input) const;
 };
 
 }
diff --git a/hoot-core/src/main/cpp/hoot/core/language/ToEnglishTranslateDictionary.cpp b/hoot-core/src/main/cpp/hoot/core/language/ToEnglishTranslateDictionary.cpp
index 4de5dea..c762308 100644
--- a/hoot-core/src/main/cpp/hoot/core/language/ToEnglishTranslateDictionary.cpp
+++ b/hoot-core/src/main/cpp/hoot/core/language/ToEnglishTranslateDictionary.cpp
@@ -57,7 +57,7 @@ _transliterationCachingEnabled(false)
 
   UErrorCode error = U_ZERO_ERROR;
 
-  _titler.reset(Transliterator::createInstance("Any-Title", UTRANS_FORWARD, error));
+  _titler.reset(IcuTransliterator::createInstance("Any-Title", UTRANS_FORWARD, error));
   if (_titler == nullptr || error != U_ZERO_ERROR)
   {
     LOG_ERROR("transliterator error code: " << error);
@@ -65,7 +65,7 @@ _transliterationCachingEnabled(false)
   }
 
   _transliterator.reset(
-    Transliterator::createInstance("Any-Latin; Latin-ASCII", UTRANS_FORWARD, error));
+    IcuTransliterator::createInstance("Any-Latin; Latin-ASCII", UTRANS_FORWARD, error));
   if (_transliterator == nullptr || error != U_ZERO_ERROR)
   {
     LOG_ERROR("transliterator error code: " << error);
diff --git a/hoot-core/src/main/cpp/hoot/core/language/ToEnglishTranslateDictionary.h b/hoot-core/src/main/cpp/hoot/core/language/ToEnglishTranslateDictionary.h
index 0fc7a83..213296a 100644
--- a/hoot-core/src/main/cpp/hoot/core/language/ToEnglishTranslateDictionary.h
+++ b/hoot-core/src/main/cpp/hoot/core/language/ToEnglishTranslateDictionary.h
@@ -40,6 +40,8 @@
 namespace hoot
 {
 
+using IcuTransliterator = icu_69::Transliterator;
+
 /**
  * (Singleton)
  */
@@ -58,8 +60,8 @@ public:
     const QString& originalText, const QString& transliteratedText) const;
 
   bool transliterationCachingEnabled() const { return _transliterationCachingEnabled; }
-  std::shared_ptr<Transliterator> getTransliterator() const { return _transliterator; }
-  std::shared_ptr<Transliterator> getTitler() const { return _titler; }
+  std::shared_ptr<IcuTransliterator> getTransliterator() const { return _transliterator; }
+  std::shared_ptr<IcuTransliterator> getTitler() const { return _titler; }
 
 private:
 
@@ -67,8 +69,8 @@ private:
 
   QMap<QString, QStringList> _translations;
   std::shared_ptr<Tgs::LruCache<QString, QString>> _transliterationCache;
-  std::shared_ptr<Transliterator> _transliterator;
-  std::shared_ptr<Transliterator> _titler;
+  std::shared_ptr<IcuTransliterator> _transliterator;
+  std::shared_ptr<IcuTransliterator> _titler;
   bool _transliterationCachingEnabled;
 
   ToEnglishTranslateDictionary();
diff --git a/hoot-core/src/main/cpp/hoot/core/schema/OsmSchema.h b/hoot-core/src/main/cpp/hoot/core/schema/OsmSchema.h
index 23cd2f6..ba51244 100644
--- a/hoot-core/src/main/cpp/hoot/core/schema/OsmSchema.h
+++ b/hoot-core/src/main/cpp/hoot/core/schema/OsmSchema.h
@@ -437,7 +437,7 @@ public:
   /**
    * Returns true if this is a reversed unidirectional way. (E.g. oneway=reverse)
    */
-  bool isReversed(const Element& e) const;
+  //bool isReversed(const Element& e) const;
   /**
    * Return true if this tag can contain free-form text.
    */
diff --git a/hoot-core/src/main/cpp/hoot/core/schema/PythonSchemaTranslator.cpp b/hoot-core/src/main/cpp/hoot/core/schema/PythonSchemaTranslator.cpp
index a39d159..918e7d8 100644
--- a/hoot-core/src/main/cpp/hoot/core/schema/PythonSchemaTranslator.cpp
+++ b/hoot-core/src/main/cpp/hoot/core/schema/PythonSchemaTranslator.cpp
@@ -35,7 +35,11 @@
 #endif
 // Python requires that it be included before other files. Ugh.
 // See http://docs.python.org/c-api/intro.html#includes
-#include <Python.h>
+// "slots" is a Qt keyword, so ignore it here temporarily.
+#pragma push_macro("slots")
+#undef slots
+#include "Python.h"
+#pragma pop_macro("slots")
 
 #include "PythonSchemaTranslator.h"
 
@@ -70,10 +74,9 @@ void PythonSchemaTranslator::_init()
   QStringList pythonPath;
   QString moduleName;
 
-  LOG_VART(_scriptPath);
+  QFileInfo info(_scriptPath);
   if (_scriptPath.endsWith(".py"))
   {
-    QFileInfo info(_scriptPath);
     if (info.exists() == false)
     {
       throw HootException("Unable to find translation module: " + _scriptPath);
@@ -98,6 +101,8 @@ void PythonSchemaTranslator::_init()
   LOG_DEBUG("Python path: " << pythonPath.join(":"));
   setenv("PYTHONPATH", pythonPath.join(":").toUtf8().constData(), 1);
   Py_Initialize();
+  PyObject *sys_path = PySys_GetObject("path");
+  PyList_Append(sys_path, PyUnicode_FromString(info.dir().absolutePath().toLatin1().data()));
 
   const char* data = moduleName.toLatin1().data();
   PyObject* module = PyImport_ImportModule(data);
@@ -142,14 +147,20 @@ void PythonSchemaTranslator::_finalize()
 {
   LOG_DEBUG("Finalizing Python");
   Py_DECREF((PyObject*)_translateFunction);
-  Py_Finalize();
+  // Disabling finalization for now as it is crashing regardless of whether any py calls have been
+  // made or not. Since most translations are being done with a single instantiation of this class
+  // should be ok for the time being. Unfortunately, this will hang on to memory at the end of the
+  // process and require the process to be manually killed.
+  //Py_Finalize();
+  //int errorCode = Py_FinalizeEx();
+  //LOG_VART(errorCode);
 }
 
 void PythonSchemaTranslator::_translateToOsm(
   Tags& tags, const char* layerName, const char* geomType)
 {
-  PyObject* layerNamePy = PyString_FromString(layerName);
-  PyObject* geomTypePy = PyString_FromString(geomType);
+  PyObject* layerNamePy = PyUnicode_FromString(layerName);
+  PyObject* geomTypePy = PyUnicode_FromString(geomType);
   PyObject* attrs = PyDict_New();
 
   for (Tags::const_iterator it = tags.begin(); it != tags.end(); ++it)
@@ -209,8 +220,8 @@ void PythonSchemaTranslator::_translateToOsm(
       QString qKey, qValue;
 #       if (Py_UNICODE_SIZE == 4)
       {
-        qKey = QString::fromUcs4(keyUnicodeData);
-        qValue = QString::fromUcs4(valueUnicodeData);
+        qKey = QString::fromWCharArray(keyUnicodeData);
+        qValue = QString::fromWCharArray(valueUnicodeData);
       }
 #       elif (Py_UNICODE_SIZE == 2)
       {
diff --git a/hoot-core/src/main/cpp/hoot/core/scoring/MatchComparator.cpp b/hoot-core/src/main/cpp/hoot/core/scoring/MatchComparator.cpp
index 446ec2f..c7ab18e 100644
--- a/hoot-core/src/main/cpp/hoot/core/scoring/MatchComparator.cpp
+++ b/hoot-core/src/main/cpp/hoot/core/scoring/MatchComparator.cpp
@@ -537,8 +537,17 @@ void MatchComparator::_findActualMatches(const ConstOsmMapPtr& in, const ConstOs
       }
       else
       {
-        LOG_TRACE("Missing UUID: " << cList[i]);
-        throw HootException("Conflated uuid was not found in either input: " + cList[i]);
+        // Changed this to not throw an exception in order to keep a scoring run from crashing. 
+        // This may lead to score inaccuracies.
+        if (logWarnCount < Log::getWarnMessageLimit())
+        {
+          LOG_WARN("Missing UUID: " << cList[i]);
+        }
+        else if (logWarnCount == Log::getWarnMessageLimit())
+        {
+          LOG_WARN(className() << ": " << Log::LOG_WARN_LIMIT_REACHED_MESSAGE);
+        }
+        logWarnCount++;
       }
     }
     // create a match between all the combinations of ref1 uuid to ref2 uuid
diff --git a/scripts/HootEnv.sh b/scripts/HootEnv.sh
index a0037c6..3768585 100755
--- a/scripts/HootEnv.sh
+++ b/scripts/HootEnv.sh
@@ -10,17 +10,21 @@ export HOOT_WORKING_NAME=`echo $HOOT_HOME | sed -e "s/.*\///g"`
 export CCACHE_SLOPPINESS=time_macros
 
 # Determine the library path for GDAL
-export GDAL_LIB_DIR=`gdal-config --libs | sed -e "s/-L//g" | sed -e "s/ *-lgdal.*//g"`
-export GDAL_DATA=`gdal-config --datadir`
-
-# Use JDK path for JAVA_HOME if present
-if [ -L "/usr/lib/jvm/java-1.8.0" ]; then
-  export JAVA_HOME="/usr/lib/jvm/java-1.8.0"
-  export LD_LIBRARY_PATH=$GDAL_LIB_DIR:$JAVA_HOME/jre/lib/amd64/server:$HOOT_HOME/lib:$LD_LIBRARY_PATH
-else # Assume there is just a 'jre' path
-  export JAVA_HOME="/usr/lib/jvm/jre-1.8.0"
-  export LD_LIBRARY_PATH=$GDAL_LIB_DIR:$JAVA_HOME/lib/amd64/server:$HOOT_HOME/lib:$LD_LIBRARY_PATH
-fi
+#export GDAL_LIB_DIR=`gdal-config --libs | sed -e "s/-L//g" | sed -e "s/ *-lgdal.*//g"`
+#export GDAL_DATA=`gdal-config --datadir`
+unset GDAL_LIB_DIR
+export GDAL_DATA=$HOOT_HOME/gdal
+export PROJ_LIB=$HOOT_HOME
+
+# No need for JDK w/ Python
+## Use JDK path for JAVA_HOME if present
+#if [ -L "/usr/lib/jvm/java-1.8.0" ]; then
+#  export JAVA_HOME="/usr/lib/jvm/java-1.8.0"
+#  export LD_LIBRARY_PATH=$GDAL_LIB_DIR:$JAVA_HOME/jre/lib/amd64/server:$HOOT_HOME/lib:$LD_LIBRARY_PATH
+#else # Assume there is just a 'jre' path
+#  export JAVA_HOME="/usr/lib/jvm/jre-1.8.0"
+#  export LD_LIBRARY_PATH=$GDAL_LIB_DIR:$JAVA_HOME/lib/amd64/server:$HOOT_HOME/lib:$LD_LIBRARY_PATH
+#fi
 
 export PATH=$HOOT_HOME/bin/:$PATH
 export QT_SELECT=5
diff --git a/scripts/core/CreateConfigCode.py b/scripts/core/CreateConfigCode.py
index e5e35cf..95b9457 100755
--- a/scripts/core/CreateConfigCode.py
+++ b/scripts/core/CreateConfigCode.py
@@ -12,14 +12,16 @@ import textwrap
 import datetime
 
 if (len(sys.argv) != 4):
-    print "Usage:"
-    print sys.argv[0] + " (config file) (output header) (output defaults header)"
+    print("Usage:")
+    print(sys.argv[0] + " (config file) (output header) (output defaults header)")
     sys.exit(-1)
 
 fn = sys.argv[1]
 headerFn = sys.argv[2]
 defaultsHeaderFn = sys.argv[3]
 
+PYTHON_MAJOR_VERSION = sys.version_info[0]
+
 notice = """/*
  * This file is part of Hootenanny.
  *
@@ -56,7 +58,10 @@ notice = """/*
 notice = notice.replace("{XXXX}", datetime.date.today().strftime("%Y"));
 
 def escapeString(s):
-    return s.encode('string-escape').replace("\"", "\\\"");
+    if PYTHON_MAJOR_VERSION < 3:
+        return s.encode('string-escape').replace("\"", "\\\"")
+    else:
+        return s.encode('unicode_escape').decode("utf-8").replace("\"", "\\\"")
 
 def stripDefaultValue(s):
     m = re.search("\\* Default Value: `(.*)`", s)
@@ -120,7 +125,7 @@ def loadAsciiDoc(fn):
                 element['default'] = stripDefaultValue(l)
                 inBody = True
                 inList = False
-  	elif (ls.startswith("* Minimum: ")):
+        elif (ls.startswith("* Minimum: ")):
             if (element['type'] == 'int'):
                 element['minimum'] = stripInt("Minimum", ls)
             elif (element['type'] == 'double'):
@@ -185,7 +190,7 @@ def loadAsciiDoc(fn):
         else:
             raise Exception("unexpected line (%d) in: %s line: %s" % (ln, section, l))
 
-    for k, v in result.iteritems():
+    for k, v in result.items():
         v['description'] = v['description'].strip();
 
     return result
